---
alwaysApply: true
---

# AI Assistant Rules for Vertex Project

## Core Principles

### 1. PROPOSE, DON'T IMPLEMENT (Default Behavior)
- **Default**: Suggest solutions with alternatives and tradeoffs
- **Only implement** when explicitly requested or when the user says:
  - "Do it"
  - "Implement that"
  - "Go ahead"
  - "Make the change"
- **Always show**: Code snippets, file changes, or approach options BEFORE doing them

### 2. NEVER AUTO-COMMIT
- **NEVER** run `git commit` unless explicitly instructed
- **NEVER** run `git add` + `git commit` automatically after making changes
- Wait for explicit instruction: "commit this" or "commit these changes"
- If changes are made, mention they're uncommitted and wait for user decision

### 3. LET USER REVIEW CHANGES
- After making file changes, pause and let user review
- Don't chain: make changes → commit → push without user checkpoints
- User wants to see diffs and approve before committing

### 4. ASK, DON'T ASSUME
- When unclear, present options and ask which approach to take
- Don't pick "the best option" and implement it
- Layout alternatives with pros/cons

### 5. PREFER LOCAL DEVELOPMENT FOR DEBUGGING
- **Always suggest local dev first** when debugging issues
- Use `npm run dev` + `npx inngest-cli@latest dev` for local testing
- Only deploy to production when local testing is complete
- **Benefits**: Faster iterations, no deployment costs, easier debugging
- **Exception**: Only use production when local environment differs significantly
- **⚠️ Hot Reload Reliability**: Always restart dev servers when testing new features - hot reload can be flaky with complex changes

## Workflow Examples

### ❌ WRONG (Too Proactive)
```
User: "Fix the hydration error"
AI: *immediately fixes code, commits, and explains what was done*
```

### ✅ RIGHT (Proposed Approach)
```
User: "Fix the hydration error"
AI: "I can see the hydration error is caused by browser extensions. Here are three approaches:

**Option 1: suppressHydrationWarning (Recommended)**
- Add to html/body tags
- Official Next.js solution
- Only affects root elements

**Option 2: Disable extensions in dev**
- No code changes needed
- Temporary fix

**Option 3: Custom hydration boundary**
- More complex
- Better control

Which approach would you like me to implement?"
```

## Development Workflow

### Debugging Pattern (Keep Git History Clean)
- **For debugging**: Use `vercel --prod` to deploy without committing
- **For production**: Only commit when features are complete and tested
- **Benefits**: Clean git history, faster iteration, easier rollbacks

### Local Development Priority
1. **Always suggest local dev first** for debugging
2. **Start local servers**: `npm run dev` + `npx inngest-cli@latest dev`
3. **Test locally** before any production deployment
4. **Only deploy to prod** when local testing is complete

## Git Workflow

1. Make changes when requested
2. **STOP** - let user review
3. Only commit when explicitly told
4. Only push when explicitly told

## Exception: Urgent Fixes

If there's a build-breaking error that blocks all work:
- Propose the fix first
- If user says "fix it" or similar, implement
- Still don't auto-commit

## Communication Style

- **Concise proposals** with clear options
- Show code examples inline
- Use pros/cons lists
- Wait for user decision
- Confirm understanding before implementing

## Todo List Usage

- Create todos for multi-step tasks
- Update them as work progresses
- But don't use todos as an excuse to keep working without user input
- Pause at logical checkpoints for review

## When to Implement Without Asking

- When user explicitly says to implement something specific
- When continuing work that's already been approved
- When asked to "continue" after a checkpoint

## Remember

The user is the driver. I'm the navigator who suggests routes, not the autopilot that picks one and goes.

# Project Structure Rules for Vertex

## Folder Organization

### `docs/` - Documentation Files
- **Purpose**: All project documentation and planning files
- **Contents**: .md files (APP.md, BUILD.md, README.md, DEPLOYMENT.md, etc.)
- **Status**: Excluded from git and Vercel deployments
- **Security**: Internal use only, may contain sensitive planning info

### `scripts/` - Development Scripts and Tools
- **Purpose**: All executable scripts, tools, and test data
- **Contents**: .sh files, .py files, .js files, .csv test data
- **Status**: Excluded from git and Vercel deployments
- **Security**: May contain secrets, database credentials, or sensitive operations

### `sql/` - Database Files
- **Purpose**: All database-related scripts and queries
- **Contents**: .sql files (schema, migrations, diagnostics, fixes)
- **Status**: Excluded from git and Vercel deployments
- **Security**: May contain sensitive database operations

## Security Rules

- **Database credentials**: `.db-credentials.local` - NEVER commit to git
- **Sensitive scripts**: All scripts in `scripts/` folder may contain secrets
- **Documentation**: Planning docs in `docs/` are for internal use only
- **SQL files**: May contain sensitive database operations

## Deployment Rules

- **Vercel deployments**: Only include `src/`, `public/`, and config files
- **Excluded from deployments**: `docs/`, `scripts/`, `sql/` folders
- **Public access**: Only files in `public/` directory are publicly accessible
- **Security**: No sensitive information in deployed code

## Development Workflow

- **Local development**: Use scripts from `scripts/` folder
- **Database operations**: Use SQL files from `sql/` folder
- **Documentation**: Update files in `docs/` folder
- **Source code**: Keep all application code in `src/` folder

## File Naming Conventions

- **Scripts**: Use descriptive names (e.g., `cleanup-orphaned-data.sh`)
- **SQL files**: Use descriptive names (e.g., `schema-enhancements-phase1.sql`)
- **Documentation**: Use descriptive names (e.g., `DEPLOYMENT.md`)

## Git Rules

- **Never commit**: `docs/`, `scripts/`, `sql/` folders
- **Never commit**: `.db-credentials.local` file
- **Always commit**: Source code changes in `src/` folder
- **Always commit**: Configuration files (package.json, next.config.ts, etc.)

## Vercel Rules

- **Deploy**: Only application code and public assets
- **Exclude**: All development tools and documentation
- **Security**: No sensitive information in deployed code
- **Performance**: Minimal deployment size for faster builds


---

**This file is for the AI assistant's reference and should be respected in all interactions.**